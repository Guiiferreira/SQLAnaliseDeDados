-- SUBQUARY
-- SERVEM PARA CONSULTAR DADOS DE OUTRAS CONSULTAS 

--TIPOS
-- SUBQUERY NO WHERE
-- SUBQUERY NO WITH
-- SUBQUERY NO FROM
-- SUBQUERY NO SELECT

-- -- SUBQUERY NO WHERE
-- INFROME QUAL É O VEICULO MAIS BARATO DA TABELA PRODUCTS

SELECT *
FROM SALES.PRODUCTS
WHERE PRICE = (SELECT MIN(PRICE) FROM SALES.PRODUCTS)

--SUBQUERY COM WITH
-- CALCULE A IDADE MEDIA DIOS CLIENTER POR STATUS PROFISSIONAL

with alguma_tabela as (
SELECT 
	professional_status,
	(current_date - birth_date)/365 as idade
from sales.customers
)
select 
 	professional_status,
	 avg(idade) as idade_media
from alguma_tabela
group by professional_status

--SUBQUERY NO FROM
-- CALCULE A MÉDIA DE IDADES DOS CLIENTES POR STATUS PROFISSIONAL 


SELECT *
FROM SALES.PRODUCTS
WHERE PRICE = (SELECT MIN(PRICE) FROM SALES.PRODUCTS)

--SUBQUERY COM WITH
-- CALCULE A IDADE MEDIA DIOS CLIENTER POR STATUS PROFISSIONAL


select 
 	professional_status,
	 avg(idade) as idade_media
from (SELECT 
	professional_status,
	(current_date - birth_date)/365 as idade
	from sales.customers
	) AS ALGUMA_TABELA
group by professional_status


-- SUBQUERY NO SELECT 
-- NA TABELA SALES.FUNNEL CIRE UMA COLUNA QUE INFORME O NUMERO DE
--VISITAS ACUMULADAS QUE A LOJA VISITADA RECEBEU ATE HOJE 
SELECT
	FUN.VISIT_ID,
	FUN.VISIT_PAGE_DATE,
	STO.STORE_NAME,
	(	
		SELECT COUNT(*)
		FROM SALES.FUNNEL AS FUN2
		WHERE FUN2.VISIT_PAGE_DATE <= FUN.VISIT_PAGE_DATE
		AND FUN2.STORE_ID = FUN.STORE_ID
	) AS VISITAS_ACUMULADAS
FROM SALES.FUNNEL AS FUN
LEFT JOIN SALES.STORES AS STO
	ON FUN.STORE_ID = STO.STORE_ID
ORDER BY STO.STORE_NAME, FUN.VISIT_PAGE_DATE


-- EXEMPLOS COM WITH
-- ANALISE DE RECORRENCIA DOS LEADS
--CALCULE O VOLUME DE VISITAS POR DIAS AO SITE 
--SEPARADO POR 1 VISITA E DEMAIS VISITAS


WITH PRIMEIRA_VISITA AS (

	SELECT CUSTOMER_ID, MIN(VISIT_PAGE_DATE)AS VISITA_1
	FROM SALES.FUNNEL
	GROUP BY CUSTOMER_ID
)
SELECT
	FUN.VISIT_PAGE_DATE,
	(FUN.VISIT_PAGE_DATE <> PRIMEIRA_VISITA.VISITA_1) AS LEAD_RECORRENTE,
	COUNT(*)
FROM SALES.FUNNEL AS FUN 
LEFT JOIN  PRIMEIRA_VISITA 
ON FUN.CUSTOMER_ID = PRIMEIRA_VISITA.CUSTOMER_ID
GROUP BY FUN.VISIT_PAGE_DATE, LEAD_RECORRENTE
ORDER BY FUN.VISIT_PAGE_DATE DESC, LEAD_RECORRENTE

-- ANALISE DO PRECO VERSUS O PRECO MEDIO
-- CALCULE, PARA CADA VISITA AO SITE, QUANTO O PRECO DE UM VEICULO
--VISITADO PELO CLIENTE ESTAVA ACIMA OU ABAIXO DO PRECO MEDIO DOS
-- VEIUCLOS DAQUELA MARCA(LEVAR EM CONSIDERACAO O DESCONTO
--DADO NO VÉICULO)



WITH PRECO_MEDIO AS(

		SELECT BRAND,
		AVG(PRICE) AS PRECO_MEDIO_DA_MARCA
		FROM SALES.PRODUCTS
		GROUP BY BRAND
)
SELECT 
	FUN.VISIT_ID,
	FUN.VISIT_PAGE_DATE,
	PRO.BRAND,
	(PRO.PRICE *(1+FUN.DISCOUNT)) AS PRECO_FINAL,
	PRECO_MEDIO.PRECO_MEDIO_DA_MARCA,
	((PRO.PRICE *(1+FUN.DISCOUNT)) - PRECO_MEDIO.PRECO_MEDIO_DA_MARCA)
	AS PRECO_VS_MEDIA


FROM SALES.FUNNEL AS FUN
LEFT JOIN SALES.PRODUCTS AS PRO 
	ON FUN.PRODUCT_ID = PRO.PRODUCT_ID
LEFT JOIN PRECO_MEDIO
	ON PRO.BRAND = PRECO_MEDIO.BRAND




--Crie uma coluna calculada com o número de visitas realizadas por cada
-- cliente da tabela sales.customers

with numero_de_visitas as (

	select customer_id, count(*) as n_visitas
	from sales.funnel
	group by customer_id

)

select
	cus.*,
	n_visitas

from sales.customers as cus
left join numero_de_visitas as ndv
	on cus.customer_id = ndv.customer_id


